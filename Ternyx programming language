Ternyx Language Specification (Updated)

*Syntax*

- Code enclosed in `{}`.
- Indentation: 3 spaces.
- `?` symbol on the same line is ignored by the interpreter.

*Keywords*

1. `zhrak` (if)
2. `koral` (else)
3. `sarvu` (while)
4. `torvik` (for)
5. `nyxal` (def)
6. `vokar` (print)
7. `rylakk` (return)
8. `threx` (and)
9. `kyrix` (or)
10. `sygma` (not)

*Operators*

1. `+` (addition)
2. `-` (subtraction)
3. `*` (multiplication)
4. `/` (division)
5. `==` (equality)
6. `!=` (inequality)
7. `<` (less than)
8. `>` (greater than)
9. `<=` (less than or equal)
10. `>=` (greater than or equal)

*Data Types*

_Numeric Types_
1. `kal` (Integer)
2. `nexa` (Float)

_Text Type_
1. `vix` (String)

_Boolean Type_
1. `dual` (Boolean)

_Sequence Types_
1. `sek` (List)
2. `kor` (Tuple)

_Mapping Type_
1. `mapa` (Dictionary)

_Additional Types_
1. `void` (Null)
2. `unin` (Undefined)

*Function Declaration*

- `fn function_name(parameters) { code }`
- Example: `fn greet(name) { vokar("Hello, " + name) }`

*Example Code*
```

  kal x = 5
  nexa y = 3.14
  vix name = "Ternyx"
  dual isAdmin = True
  sek numbers = [1, 2, 3]
  kor coordinates = (1, 2)
  mapa person = {"name": "Ternyx", "age": 25}
  void empty
  unin uninitialized
  
  Here are some Ternyx function codes and examples:

*1. Print Function*
```
fn print(message: string)
  vokar(message)

print("Hello, World!")
```

*2. Addition Function*
```
fn add(a: number, b: number)
  vokar(a + b)

add(5, 3)
```

*3. Greeting Function*
```
fn greet(name: string)
  vokar("Hello, " + name + "!")

greet("John")
```

*4. Square Function*
```
fn square(x: number)
  vokar(x * x)

square(4)
```

*5. Even/Odd Function*
```
fn isEven(n: number)
  if (n % 2 == 0)
    vokar("Even")
  else
    vokar("Odd")

isEven(10)
```

*6. Sum Array Function*
```
fn sumArray(arr: array)
  let sum: number = 0
  for (i in arr)
    sum += i
  vokar(sum)

sumArray([1, 2, 3, 4, 5])
```

*7. Factorial Function*
```
fn factorial(n: number)
  let result: number = 1
  for (i from 1 to n)
    result *= i
  vokar(result)

factorial(5)
```

*8. Fibonacci Function*
```
fn fibonacci(n: number)
  let a: number = 0
  let b: number = 1
  for (i from 2 to n)
    let temp: number = a + b
    a = b
    b = temp
  vokar(b)

fibonacci(10)
```

*9. Sorting Function*
```
fn sortArray(arr: array)
  for (i from 0 to length(arr) - 2)
    for (j from i + 1 to length(arr) - 1)
      if (arr[i] > arr[j])
        let temp: number = arr[i]
        arr[i] = arr[j]
        arr[j] = temp
  vokar(arr)

sortArray([5, 2, 8, 3, 1])
```

*10. Prime Number Function*
```
fn isPrime(n: number)
  if (n <= 1)
    vokar(false)
  else if (n == 2)
    vokar(true)
  else
    for (i from 2 to sqrt(n))
      if (n % i == 0)
        vokar(false)
    vokar(true)

isPrime(7)
```


