Ternyx Language Specification (Updated)

*Syntax*

- Code enclosed in `{}`.
- Indentation: 3 spaces.
- `?` symbol on the same line is ignored by the interpreter.

*Keywords*

1. `zhrak` (if)
2. `koral` (else)
3. `sarvu` (while)
4. `torvik` (for)
5. `nyxal` (def)
6. `vokar` (print)
7. `rylakk` (return)
8. `threx` (and)
9. `kyrix` (or)
10. `sygma` (not)

*Operators*

1. `+` (addition)
2. `-` (subtraction)
3. `*` (multiplication)
4. `/` (division)
5. `==` (equality)
6. `!=` (inequality)
7. `<` (less than)
8. `>` (greater than)
9. `<=` (less than or equal)
10. `>=` (greater than or equal)

*Data Types*

_Numeric Types_
1. `kal` (Integer)
2. `nexa` (Float)

_Text Type_
1. `vix` (String)

_Boolean Type_
1. `dual` (Boolean)

_Sequence Types_
1. `sek` (List)
2. `kor` (Tuple)

_Mapping Type_
1. `mapa` (Dictionary)

_Additional Types_
1. `void` (Null)
2. `unin` (Undefined)

*Function Declaration*

- `fn function_name(parameters) { code }`
- Example: `fn greet(name) { vokar("Hello, " + name) }`

*Example Code*
```

  kal x = 5
  nexa y = 3.14
  vix name = "Ternyx"
  dual isAdmin = True
  sek numbers = [1, 2, 3]
  kor coordinates = (1, 2)
  mapa person = {"name": "Ternyx", "age": 25}
  void empty
  unin uninitialized
  
  Here are some Ternyx function codes and examples:

*1. Print Function*
```
fn print(message: vix){
  vokar(message)}

print("Hello, World!")
```

*2. Addition Function*
```
fn add(a: number, b: number){
  vokar(a + b)}

add(5, 3)
```

*3. Greeting Function*
```
fn greet(name: vix){
  vokar("Hello, " + name + "!")}

greet("John")

Here's an example of a function in Ternyx:

fn greet(vix name) {
vokar("Hello, " + name)
}

fn add(kal x, kal y) {
kal result = x + y
vokar("Result: " + result)
}

greet("Emil")
add(5, 3)

This code defines two functions:

1. `greet`: Prints a personalized greeting.
2. `add`: Adds two numbers .

The functions are called without wrapping in a larger program or loop.

